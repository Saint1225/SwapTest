{"version":3,"sources":["Index/GetQuery.js","Index/AppMain.js","App.js","reportWebVitals.js","index.js"],"names":["withRouter","props","name","URLSearchParams","location","search","get","userId","time","Date","console","log","onSaveName","day","getDate","month","getMonth","year","getFullYear","hour","getHours","minute","getMinutes","second","getSeconds","ampm","style","display","float","AppMain","useState","query","setQuery","setName","history","useHistory","useEffect","params","append","delete","push","toString","saveNameHandler","saveName","width","justifyContent","margin","fontSize","onClick","Math","floor","random","marginLeft","order","path","render","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"iPA2BeA,eAxBE,SAACC,GAEd,IAAMC,EAAO,IAAIC,gBAAgBF,EAAMG,SAASC,QAAQC,IAAI,QACtDC,EAAS,IAAIJ,gBAAgBF,EAAMG,SAASC,QAAQC,IAAI,UACxDE,EAAO,IAAIC,KAAK,IAAIN,gBAAgBF,EAAMG,SAASC,QAAQC,IAAI,SACrEI,QAAQC,IAAIT,GACZQ,QAAQC,IAAIJ,GACZG,QAAQC,IAAIH,GACZP,EAAMW,WAAWV,GACjB,IAGIW,EAAML,EAAKM,UACXC,EAJY,CAAC,MAAM,MAAM,MAAM,MACjB,MAAM,MAAM,MAAM,MAClB,MAAO,MAAM,MAAM,OAEdP,EAAKQ,YACxBC,EAAOT,EAAKU,cACZC,EAAOX,EAAKY,WACZC,EAASb,EAAKc,aACdC,EAASf,EAAKgB,aACdC,EAAON,EAAO,GAAK,KAAM,KAC/B,OACI,sBAAKO,MAAO,CAACC,QAAS,QAASC,MAAO,QAAtC,uCAA0ErB,EAA1E,OAAsFM,EAAtF,IAA4FE,EAA5F,IAAoGE,EAApG,KAA4GE,EAA5G,IAAmHE,EAAnH,IAA4HE,EAA5H,IAAqIE,EAArI,UC0BSI,EA7CC,WACZ,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwBF,mBAAS,IAAjC,mBAAO5B,EAAP,KAAa+B,EAAb,KACMC,EAAUC,cAOhBC,qBAAU,WACR,IAAMC,EAAS,IAAIlC,gBACf4B,GACFM,EAAOC,OAAO,OAAQ,mBACtBD,EAAOC,OAAO,SAAUP,GACxBM,EAAOC,OAAO,OAAQ,IAAI7B,QAE1B4B,EAAOE,OAAO,QACdF,EAAOE,OAAO,UACdF,EAAOE,OAAO,SAEhBL,EAAQM,KAAK,CAACnC,OAAQgC,EAAOI,eAC5B,CAACV,EAAOG,IAEX,IAAMQ,EAAkB,SAACC,GACvBV,EAAQU,IAGV,OACI,sBAAKjB,MAAO,CAACkB,MAAO,SAApB,UACI,sBAAKlB,MAAO,CAACC,QAAS,OAAQkB,eAAgB,UAA9C,UACI,qBAAInB,MAAO,CAACC,QAAS,eAAgBmB,OAAQ,mBAAoBC,SAAU,QAA3E,oBAA4F7C,KAC5F,wBAAQ8C,QA3BpB,WACIhB,EAASiB,KAAKC,MAAoB,IAAdD,KAAKE,YA0BjB,wBACA,gDACA,oDACA,wBAAQzB,MAAO,CAAC0B,WAAY,OAAQC,MAAO,KAA3C,4BAEJ,cAAC,IAAD,CACEC,KAAO,IACPC,OAAQ,kBAAM,cAAC,EAAD,CAAU3C,WAAY8B,W,MC9BnCc,MAVf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,SCKOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCAdQ,IAASZ,OACP,cAAC,IAAMa,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a6bbc19a.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { withRouter } from \"react-router-dom\"\r\n\r\nconst GetQuery = (props) => {\r\n\r\n    const name = new URLSearchParams(props.location.search).get('name')\r\n    const userId = new URLSearchParams(props.location.search).get('userId')\r\n    const time = new Date(new URLSearchParams(props.location.search).get('time'))\r\n    console.log(name)\r\n    console.log(userId)\r\n    console.log(time)\r\n    props.onSaveName(name)\r\n    let monthNames =[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\r\n                      \"May\",\"Jun\",\"Jul\",\"Aug\",\r\n                      \"Sep\", \"Oct\",\"Nov\",\"Dec\"];\r\n    let day = time.getDate()\r\n    let month = monthNames[time.getMonth()]\r\n    let year = time.getFullYear()\r\n    let hour = time.getHours()\r\n    let minute = time.getMinutes()\r\n    let second = time.getSeconds()\r\n    let ampm = hour < 12 ? 'am': 'pm'\r\n  return (\r\n      <div style={{display: \"block\", float: \"left\"}}>Last modified by User id: {userId} at {day} {month} {year}, {hour}:{minute}:{second} {ampm} </div>\r\n  )\r\n}\r\n\r\nexport default withRouter(GetQuery)","import React, { useEffect, useState } from 'react';\r\nimport { Route, useHistory } from 'react-router-dom';\r\nimport GetQuery from './GetQuery'\r\n\r\nconst AppMain = () => {\r\n    const [query, setQuery] = useState(\"\")\r\n    const [name, setName] = useState(\"\")\r\n    const history = useHistory()\r\n\r\n    function onChange() {\r\n        setQuery(Math.floor(Math.random()*100))\r\n\r\n    }\r\n  \r\n    useEffect(() => {\r\n      const params = new URLSearchParams()\r\n      if (query) {\r\n        params.append(\"name\", \"Name from query\")\r\n        params.append(\"userId\", query)\r\n        params.append(\"time\", new Date())\r\n      } else {\r\n        params.delete(\"name\")\r\n        params.delete(\"userId\")\r\n        params.delete(\"time\")\r\n      }\r\n      history.push({search: params.toString()})\r\n    }, [query, history])\r\n\r\n    const saveNameHandler = (saveName) => {\r\n      setName(saveName)\r\n    }\r\n\r\n    return (\r\n        <div style={{width: \"800px\"}}>\r\n            <div style={{display: \"flex\", justifyContent: \"center\"}}>\r\n                <h3 style={{display: \"inline-block\", margin: \"0px 10px 0px 0px\", fontSize: \"22px\"}}>Swap - {name}</h3>\r\n                <button onClick={onChange}>Amend Swap</button>\r\n                <button>Clone Swap</button>\r\n                <button>Generate Email</button>\r\n                <button style={{marginLeft: \"auto\", order: \"2\"}}>Delete Swap</button>\r\n            </div>\r\n            <Route \r\n              path={ '/' }\r\n              render={() => <GetQuery onSaveName={saveNameHandler} />}\r\n            ></Route>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppMain","import AppMain from './Index/AppMain'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <AppMain />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}